import { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { PencilIcon } from 'lucide-react';
import { Question, CodeGap } from '@/types';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd-next';

interface CodeFillQuestionProps {
  question: Question;
  onUpdate: (updatedQuestion: Question) => void;
  onDelete: () => void;
  onMoveUp: () => void;
  onMoveDown: () => void;
}

export default function CodeFillQuestion({
  question,
  onUpdate,
  onDelete,
  onMoveUp,
  onMoveDown
}: CodeFillQuestionProps) {
  const [localTitle, setLocalTitle] = useState(question.title);
  const [localExplanation, setLocalExplanation] = useState(question.explanation || '');
  const [isEditingCode, setIsEditingCode] = useState(false);
  const [codeWithGaps, setCodeWithGaps] = useState(question.codeWithGaps || '');
  const [gaps, setGaps] = useState<CodeGap[]>(
    question.gaps as CodeGap[] || []
  );
  const [availableSnippets, setAvailableSnippets] = useState<string[]>(
    question.availableSnippets as string[] || []
  );
  const [newSnippet, setNewSnippet] = useState('');

  const handleSave = () => {
    onUpdate({
      ...question,
      title: localTitle,
      explanation: localExplanation,
      codeWithGaps: codeWithGaps,
      gaps: gaps,
      availableSnippets: availableSnippets
    });
  };

  const handleAddSnippet = () => {
    if (newSnippet.trim()) {
      setAvailableSnippets([...availableSnippets, newSnippet.trim()]);
      setNewSnippet('');
    }
  };

  const handleRemoveSnippet = (index: number) => {
    const updatedSnippets = [...availableSnippets];
    updatedSnippets.splice(index, 1);
    setAvailableSnippets(updatedSnippets);
  };

  const onDragEnd = (result: any) => {
    if (!result.destination) return;
    
    const items = Array.from(availableSnippets);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);
    
    setAvailableSnippets(items);
  };

  const parseCodeWithVisualGaps = () => {
    let displayCode = codeWithGaps;
    gaps.forEach((gap, index) => {
      const gapPlaceholder = `<span class="bg-blue-600 px-2 py-1 rounded text-white">${gap.answer}</span>`;
      displayCode = displayCode.replace(`[GAP_${index + 1}]`, gapPlaceholder);
    });
    return displayCode;
  };

  // Function to process code with gaps when editing is done
  const saveCodeWithGaps = (code: string) => {
    const gapPattern = /\[GAP_(\d+):(.*?)\]/g;
    let match;
    const newGaps: CodeGap[] = [];
    let cleanCode = code;

    while ((match = gapPattern.exec(code)) !== null) {
      const gapNumber = parseInt(match[1]);
      const gapAnswer = match[2];
      
      newGaps.push({
        id: `gap-${gapNumber}`,
        position: gapNumber,
        answer: gapAnswer
      });
      
      // Replace the pattern with a simple gap marker for the clean code
      cleanCode = cleanCode.replace(match[0], `[GAP_${gapNumber}]`);
    }

    setGaps(newGaps);
    setCodeWithGaps(cleanCode);
    setIsEditingCode(false);
  };

  return (
    <Card className="bg-white rounded-lg shadow-sm">
      <CardContent className="p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold">
            Question {question.order} <span className="text-sm font-normal text-gray-500">(Fill in the Gaps)</span>
          </h2>
          <div className="flex items-center space-x-2">
            <Button variant="ghost" size="icon" onClick={onMoveUp}>
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-4 h-4"><path d="m18 15-6-6-6 6"/></svg>
            </Button>
            <Button variant="ghost" size="icon" onClick={onMoveDown}>
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-4 h-4"><path d="m6 9 6 6 6-6"/></svg>
            </Button>
            <Button variant="ghost" size="icon" onClick={onDelete} className="text-red-500 hover:text-red-700 hover:bg-red-50">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-4 h-4"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/></svg>
            </Button>
          </div>
        </div>
        
        <div className="space-y-4">
          <div>
            <Label htmlFor={`question-title-${question.id}`} className="block text-sm font-medium text-gray-700 mb-1">Question</Label>
            <Input
              id={`question-title-${question.id}`}
              value={localTitle}
              onChange={(e) => setLocalTitle(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div className="border border-gray-200 rounded-lg p-4 bg-gray-50">
            <h3 className="font-medium mb-3">Code with Gaps</h3>
            
            <div className="bg-[#1E293B] p-4 rounded-md font-mono text-sm text-[#E5E7EB] overflow-auto relative">
              {isEditingCode ? (
                <Textarea
                  value={codeWithGaps}
                  onChange={(e) => setCodeWithGaps(e.target.value)}
                  className="bg-[#1E293B] text-[#E5E7EB] border-none font-mono text-sm min-h-[200px] resize-y"
                  placeholder="Enter code with gaps marked as [GAP_1:answer], [GAP_2:answer], etc."
                />
              ) : (
                <div dangerouslySetInnerHTML={{ __html: parseCodeWithVisualGaps() }} />
              )}
              <div className="absolute top-2 right-2">
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={() => isEditingCode ? saveCodeWithGaps(codeWithGaps) : setIsEditingCode(true)}
                  className="text-gray-300 hover:text-white p-1 h-8 w-8">
                  <PencilIcon className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            <div className="mt-4">
              <div className="flex items-center justify-between mb-2">
                <h4 className="font-medium text-sm">Available Code Snippets</h4>
                <div className="flex">
                  <Input
                    value={newSnippet}
                    onChange={(e) => setNewSnippet(e.target.value)}
                    placeholder="New snippet"
                    className="mr-2 h-8 text-sm"
                  />
                  <Button 
                    onClick={handleAddSnippet} 
                    size="sm"
                    className="h-8">
                    Add
                  </Button>
                </div>
              </div>
              
              <DragDropContext onDragEnd={onDragEnd}>
                <Droppable droppableId="snippets" direction="horizontal">
                  {(provided) => (
                    <div 
                      className="flex flex-wrap gap-2" 
                      {...provided.droppableProps}
                      ref={provided.innerRef}
                    >
                      {availableSnippets.map((snippet, index) => (
                        <Draggable key={`snippet-${index}`} draggableId={`snippet-${index}`} index={index}>
                          {(provided) => (
                            <div
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              className="relative border border-gray-300 rounded bg-white px-3 py-1 font-mono text-sm cursor-move group"
                            >
                              {snippet}
                              <button
                                onClick={() => handleRemoveSnippet(index)}
                                className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-4 h-4 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                              >
                                &times;
                              </button>
                            </div>
                          )}
                        </Draggable>
                      ))}
                      {provided.placeholder}
                    </div>
                  )}
                </Droppable>
              </DragDropContext>
            </div>
          </div>
          
          <div>
            <Label htmlFor={`explanation-${question.id}`} className="block text-sm font-medium text-gray-700 mb-1">Explanation (Optional)</Label>
            <Textarea
              id={`explanation-${question.id}`}
              value={localExplanation}
              onChange={(e) => setLocalExplanation(e.target.value)}
              placeholder="Add explanation for correct answer..."
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              rows={2}
            />
          </div>
          
          <div className="pt-4 border-t border-gray-200 flex justify-end">
            <Button 
              onClick={handleSave}
              className="px-4 py-2 text-sm font-medium rounded-md bg-blue-600 text-white hover:bg-blue-700 transition">
              Save Question
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
